{"version":3,"sources":["components/InputField.js","components/Button.js","components/ButtonSetNumbers.js","components/ButtonSetEquations.js","components/ButtonSetFunction.js","components/NumberPad.js","App.js","serviceWorker.js","index.js"],"names":["InputField","e","this","props","update","target","value","currentNo","first","second","react_default","a","createElement","type","showValue","onChange","bind","className","Component","Button","clickHandler","buttonClass","onClick","compute","ButtonSetNumbers","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","numberArray","_this2","numberButtons","map","number","components_Button","key","buttonClickHandler","ButtonSetEquations","equation","buttonEquation","eq","ButtonSetFunction","operatorArray","operatorButton","op","class","NumberPad","components_ButtonSetNumbers","components_ButtonSetEquations","components_ButtonSetFunction","App","state","firstNumber","secondNumber","sign","setState","newValue","updatedValue","parseInt","updateFirstNumber","updateSecondNumber","result","updateNumber","stateChangeToSecond","saveSign","clearAll","stateChangeToOne","computeResult","components_InputField","components_NumberPad","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.15615787.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass InputField extends Component {\r\n  update(e) {\r\n    this.props.update(e.target.value);\r\n  }\r\n\r\n  showValue() {\r\n    if (this.props.currentNo === 1) {\r\n      return this.props.first;\r\n    } else {\r\n      return this.props.second;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input\r\n          type=\"textbox\"\r\n          value={this.showValue()}\r\n          onChange={this.update.bind(this)}\r\n          className=\"input-field\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputField;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Button extends Component {\r\n  compute() {\r\n    this.props.clickHandler(this.props.value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <button\r\n        className={this.props.buttonClass}\r\n        onClick={this.compute.bind(this)}\r\n      >\r\n        {this.props.value}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Button;\r\n","import React, { Component } from \"react\";\r\nimport Button from \"./Button\";\r\nclass ButtonSetNumbers extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.numberArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\r\n  }\r\n\r\n  buttonClickHandler(value) {\r\n    this.props.clickHandler(value);\r\n  }\r\n\r\n  render() {\r\n    let numberButtons = this.numberArray.map(number => {\r\n      return (\r\n        <Button\r\n          buttonClass=\"number-button\"\r\n          value={number}\r\n          key={number}\r\n          clickHandler={this.buttonClickHandler.bind(this)}\r\n        />\r\n      );\r\n    });\r\n    return <div className=\"button-set-number\">{numberButtons}</div>;\r\n  }\r\n}\r\n\r\nexport default ButtonSetNumbers;\r\n","import React, { Component } from \"react\";\r\nimport Button from \"./Button\";\r\nclass ButtonSetEquations extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.equation = [\"RECALL\", \"CLEAR\", \"BACK\"];\r\n  }\r\n\r\n  buttonClickHandler(value) {\r\n    this.props.clickHandler(value);\r\n  }\r\n\r\n  render() {\r\n    let buttonEquation = this.equation.map(eq => {\r\n      return (\r\n        <Button\r\n          buttonClass=\"equation-button\"\r\n          key={eq}\r\n          clickHandler={this.buttonClickHandler.bind(this)}\r\n          value={eq}\r\n        />\r\n      );\r\n    });\r\n    return <div className=\"button-set-equation\">{buttonEquation}</div>;\r\n  }\r\n}\r\n\r\nexport default ButtonSetEquations;\r\n","import React, { Component } from \"react\";\r\nimport Button from \"./Button\";\r\nclass ButtonSetFunction extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.operatorArray = [\"+\", \"-\", \"*\", \"/\", \"=\"];\r\n  }\r\n\r\n  buttonClickHandler(value) {\r\n    this.props.clickHandler(value);\r\n  }\r\n\r\n  render() {\r\n    let operatorButton = this.operatorArray.map(op => {\r\n      return (\r\n        <Button\r\n          buttonClass=\"operator-button\"\r\n          value={op}\r\n          key={op}\r\n          clickHandler={this.buttonClickHandler.bind(this)}\r\n        />\r\n      );\r\n    });\r\n    return <div class=\"button-set-function\">{operatorButton}</div>;\r\n  }\r\n}\r\n\r\nexport default ButtonSetFunction;\r\n","import React, { Component } from \"react\";\r\nimport ButtonSetNumbers from \"./ButtonSetNumbers\";\r\nimport ButtonSetEquations from \"./ButtonSetEquations\";\r\nimport ButtonSetFunction from \"./ButtonSetFunction\";\r\n\r\nclass NumberPad extends Component {\r\n  buttonClickHandler(value) {\r\n    this.props.clickHandler(value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"number-pad\">\r\n        <div className=\"clearfix\">\r\n          <div className=\"number-equation-button\">\r\n            <ButtonSetNumbers\r\n              clickHandler={this.buttonClickHandler.bind(this)}\r\n            />\r\n            <ButtonSetEquations\r\n              clickHandler={this.buttonClickHandler.bind(this)}\r\n            />\r\n          </div>\r\n          <ButtonSetFunction\r\n            clickHandler={this.buttonClickHandler.bind(this)}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NumberPad;\r\n","import React, { Component } from \"react\";\nimport InputField from \"./components/InputField\";\nimport NumberPad from \"./components/NumberPad\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      firstNumber: 0,\n      secondNumber: 0,\n      currentNo: 1,\n      sign: \"+\"\n    };\n  }\n\n  clearAll() {\n    this.setState({\n      firstNumber: 0,\n      secondNumber: 0,\n      currentNo: 1,\n      sign: \"+\"\n    });\n  }\n\n  updateFirstNumber(newValue) {\n    this.setState({ firstNumber: newValue });\n  }\n\n  saveSign(value) {\n    this.setState({ sign: value });\n  }\n\n  updateSecondNumber(newValue) {\n    this.setState({ secondNumber: newValue });\n  }\n\n  updateNumber(value) {\n    if (this.state.currentNo === 1) {\n      let updatedValue = parseInt(this.state.firstNumber) * 10 + value;\n      this.updateFirstNumber(updatedValue);\n    } else {\n      let updatedValue = parseInt(this.state.secondNumber) * 10 + value;\n      this.updateSecondNumber(updatedValue);\n    }\n  }\n\n  stateChangeToSecond() {\n    this.setState({ currentNo: 2 });\n  }\n\n  stateChangeToOne() {\n    this.setState({ currentNo: 1 });\n  }\n\n  computeResult() {\n    let first = parseInt(this.state.firstNumber);\n    let second = parseInt(this.state.secondNumber);\n\n    let result;\n    switch (this.state.sign) {\n      case \"+\":\n        result = first + second;\n\n        break;\n      case \"-\":\n        result = first - second;\n        break;\n      case \"*\":\n        result = first * second;\n        break;\n      case \"/\":\n        result = first / second;\n        break;\n    }\n\n    this.setState({ firstNumber: 0, secondNumber: 0 }, () => {\n      this.updateNumber(result);\n    });\n  }\n\n  buttonClickHandler(value) {\n    if (value === \"+\" || value === \"-\" || value === \"*\" || value === \"/\") {\n      this.stateChangeToSecond();\n      this.saveSign(value);\n    } else if (value === \"CLEAR\") {\n      this.clearAll();\n      this.stateChangeToOne();\n    } else if (value === \"=\") {\n      this.setState({ currentNo: 1 }, this.computeResult.bind(this));\n    } else if (typeof value === \"number\") {\n      this.updateNumber(value);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"calculator\">\n          <InputField\n            first={this.state.firstNumber}\n            second={this.state.secondNumber}\n            currentNo={this.state.currentNo}\n            update={this.updateNumber.bind(this)}\n          />\n          <NumberPad clickHandler={this.buttonClickHandler.bind(this)} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}